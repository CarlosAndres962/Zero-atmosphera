package zeroatmosphere;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class SeguirSecuencia extends JFrame implements ActionListener {

    private JButton[] botones = new JButton[4]; // Array para los 4 botones
    private ArrayList<Integer> secuencia = new ArrayList<>(); // Lista para almacenar la secuencia de números.
    
    private int secuenciasCompletadas = 0; // Contador de secuencias completadas por el jugador.
    private int indiceJugador = 0; // Índice para seguir el progreso del jugador en la secuencia.

    private boolean reproduciendoSecuencia = false; // variable para indicar si la secuencia se está reproduciendo.
    public boolean juegoGanado = false; // Bandera para indicar si el jugador ha ganado.
    public boolean juegoTerminado = false; // Bandera para indicar si el juego ha terminado.

    private JPanel panelJuego; // propósito del atributo, crear un panel para contener los botones del juego.
    
    
    //JFrame proporciona funcionalidades para gestionar la ventana
    //JPanel contenedor genérico para agrupar y organizar componentes de una ventana o panel.
    
    
    //constructor
    public SeguirSecuencia() { 
        setTitle("Seguir la Secuencia"); // Título de la ventana. setTitle() es un método de la clase JFrame.
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Establece la operación de cierre de la ventana. setDefaultCloseOperation() método de la clase JFrame.

       
        // Panel para la imagen de fondo.
        JPanel panelFondo = new JPanel(new BorderLayout())  { 
        
            BufferedImage backgroundImage = null; //BufferedImage clase q representa imag en memoria.

            @Override
            protected void paintComponent(Graphics g) { //método que se llama automáticamente cada vez que el JPanel necesita ser repintado.
                super.paintComponent(g); // Llama al método paintComponent de la superclase y realiza tareas esenciales de dibujo
                if (backgroundImage == null) { 
                        File imageFile = new File("/Users/fani/Desktop/nave2.jpg"); // Crea un objeto File con la ruta de la imagen.
                    try {
                        backgroundImage = ImageIO.read(imageFile); // Lee la imagen desde el archivo.
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Dibuja la imagen de fondo en el panel.
            }
        };
   

        panelFondo.setLayout(null); // establece el administrador de diseño (layout manager) del panelFondo a null =  especificar manualmente la posición y el tamaño de cada componente utilizando el método setBounds().
        panelJuego = new JPanel(new GridLayout(2, 2)); // Crea un panel con un GridLayout de 2x2. GridLayout organiza los componentes en una cuadrícula de filas y columnas.
        panelJuego.setOpaque(false); //indicamos que el fondo debe ser transparente (opaco false porque transparente es lo contrario)
        panelJuego.setPreferredSize(new Dimension(400, 400));//establece el tamaño preferido del panel pixeles
     

        for (int i = 0; i < 4; i++) { // Bucle para crear los 4 botones de color.
            botones[i] = new JButton(String.valueOf(i + 1)); // Crea un botón con el número correspondiente.
            botones[i].addActionListener(this); // Añade un ActionListener al botón."escuchar" los eventos de acción (clic del botón)
            botones[i].setBorder(new RoundedBorder(70)); // Establece el borde del botón. Redondeado y de 70px
            botones[i].setFont(new Font("Arial", Font.BOLD, 50)); // Establece la fuente del botón.
            panelJuego.add(botones[i]); // Añade el botón al panel de juego.
        }

        panelFondo.add(panelJuego); // Añade el panel de juego al panel de fondo.

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); //Almacena el tamaño de la pantalla en un objeto Dimension
        Insets insets = getInsets(); // Obtiene los insets de la ventana.(importante para calcular la posición correcta de los componentes dentro de la ventana)
        int x = (screenSize.width - 400) / 2; //calcula ancho y alto para centrar correctamente el panel 
        int y = (screenSize.height - 400 - insets.top) / 2; //calcula ancho y alto para centrar correctamente el panel
        panelJuego.setBounds(x, y, 400, 400); // Establece la posición y el tamaño del panel de juego.

        setContentPane(panelFondo); // Establece el panel de fondo como el contenido de la ventana.

        // Establecer el estado a pantalla completa ANTES de hacer la ventana visible
        setExtendedState(JFrame.MAXIMIZED_BOTH); // Establece la ventana en modo de pantalla completa.
        setVisible(true); // Hace que la ventana sea visible.
        iniciarJuego(); // Inicia el juego.
    }
    
    private void iniciarJuego() {
        secuencia.clear(); // Limpia la secuencia.
        indiceJugador = 0; // Reinicia el índice del jugador.
        secuenciasCompletadas = 0; // Reinicia el contador de secuencias completadas.
        agregarNumeroAleatorio(); // Añade un número aleatorio a la secuencia.
        reproducirSecuencia(); // Reproduce la secuencia.
    }

    private void agregarNumeroAleatorio() {
        Random random = new Random(); // Crea un objeto Random.
        secuencia.add(random.nextInt(4) + 1); // Añade un número aleatorio (1-4) a la secuencia.
    }

    private void reproducirSecuencia() {
        reproduciendoSecuencia = true; // Marca que la secuencia se está reproduciendo.
        Timer timer = new Timer(1000, null);///crea un temporizador que se utilizará para controlar el tiempo entre la visualización de los números en la secuencia.
        timer.addActionListener(new ActionListener() { // Añade un ActionListener al Timer.
        int indice = 0; // Índice para seguir el progreso de la reproducción.

        @Override
        public void actionPerformed(ActionEvent e) { //método actionPerformed() de la interfaz ActionListener, que se llama cada vez que el temporizador se activa.
            if (indice < secuencia.size()) { // Si el índice es menor que el tamaño de la secuencia.
                mostrarNumero(botones[secuencia.get(indice) - 1]); // Muestra el número correspondiente.
                indice++; // Incrementa el índice.
            } else { // Si el índice es igual o mayor que el tamaño de la secuencia.
                timer.stop(); // Detiene el Timer.
                reproduciendoSecuencia = false; // Marca que la secuencia ha terminado de reproducirse.
                }
            }
        });
        timer.start(); // Inicia el Timer.
    }

    private void mostrarNumero(JButton boton) { //JButton boton representa el botón que se va a modificar.
        String textoOriginal = boton.getText(); // Obtiene el texto original del botón.
        boton.setText(""); // Limpia el texto del botón.
        Timer timer = new Timer(500, new ActionListener() { //Restaurará el texto original después de 500 milisegundos, es para el efecto de salto
            @Override
            public void actionPerformed(ActionEvent e) {
                boton.setText(textoOriginal); // Restaura el texto original del botón.
                ((Timer) e.getSource()).stop(); // Detiene el Timer.
            }
        });
        timer.setRepeats(false); // Establece que el Timer no se repita.
        timer.start(); // Inicia el Timer.
    }

    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (reproduciendoSecuencia) { // Si la secuencia se está reproduciendo.
            return; // Sale del método. Evita que el jugador interactúe con los botones mientras la secuencia se está reproduciendo.
        }

        JButton botonClicado = (JButton) e.getSource(); // Obtiene el botón clicado.
        int numeroClicado = Integer.parseInt(botonClicado.getText()); // Obtiene el número del botón clicado.

        if (numeroClicado == secuencia.get(indiceJugador)) { // Si el número clicado es correcto.
            resaltarBotonClicado(botonClicado); // Resalta el botón clicado.
            indiceJugador++; // Incrementa el índice del jugador.
            if (indiceJugador == secuencia.size()) { // Si el jugador ha completado la secuencia.
                indiceJugador = 0; // Reinicia el índice del jugador.
                secuenciasCompletadas++; // Incrementa el contador de secuencias completadas.
                if (secuenciasCompletadas >= 4) { // Si el jugador ha completado 4 secuencias.
                    JOptionPane.showMessageDialog(this, "¡Has ganado! Completaste 4 secuencias."); // Muestra un mensaje de victoria.
                    juegoGanado = true; // Marca que el jugador ha ganado.
                    juegoTerminado = true; // Marca que el juego ha terminado.
                    dispose(); // Cierra la ventana del juego.
                    return; // Sale del método.
                }
               agregarNumeroAleatorio(); // Agrega un número aleatorio a la secuencia.
               reproducirSecuencia(); // Reproduce la secuencia.
            }
            } else { // Si el número clicado es incorrecto.
                JOptionPane.showMessageDialog(this, "¡Incorrecto! Juego terminado.");
                juegoTerminado = true;
                dispose();
            }   
    }

    private void resaltarBotonClicado(JButton boton) {
        boton.setLocation(boton.getX(), boton.getY() - 5); // Mueve el botón hacia arriba.
        Timer timer = new Timer(200, new ActionListener() { // Crea un Timer con un retraso de 200 ms.
            @Override
            public void actionPerformed(ActionEvent e) {
                boton.setLocation(boton.getX(), boton.getY() + 5); // Mueve el botón hacia abajo.
                ((Timer) e.getSource()).stop(); // Detiene el Timer.
            }
        });
        timer.setRepeats(false); // Establece que el Timer no se repita.
        timer.start(); // Inicia el Timer.
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SeguirSecuencia::new); // Inicia la aplicación en el hilo de despacho de eventos de Swing.
    }

    static class RoundedBorder implements javax.swing.border.Border { // Clase para crear bordes redondeados.
        private final int radius; // Radio del borde redondeado.

        RoundedBorder(int radius) {
            this.radius = radius; // Establece el radio del borde.
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(this.radius + 1, this.radius + 1, this.radius + 2, this.radius + 2); // Devuelve los insets del borde.
        }

        @Override
        public boolean isBorderOpaque() {
            return false; // Indica que el borde es opaco.
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x, y, width - 1, height - 1, radius, radius); // Dibuja el borde redondeado.
        }
    }
}
